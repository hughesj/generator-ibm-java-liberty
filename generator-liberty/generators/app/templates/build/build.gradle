group = '{{groupId}}'
version = '{{version}}'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0'
        classpath files('gradle/wlp-anttasks.jar')
        {{#has platforms 'bluemix'}}
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.2'
        {{/has}}
    }
}

apply plugin: 'war'
apply plugin: 'liberty'
{{#has platforms 'bluemix'}}
apply plugin: 'cloudfoundry'
{{/has}}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

ext {
    appName = '{{appName}}'
    {{#each properties}}
    {{this.name}} = {{{this.value}}}
    {{/each}}
    {{#has platforms 'bluemix'}}
    // Cloud Foundry/Bluemix properties
    // This is the host for your app in Bluemix and what it will be called in the dashboard.
    cfHost = appName
    cfContext = 'mybluemix.net'
    cfTarget = 'https://api.ng.bluemix.net'
    cfSpace = 'dev'
    cfContextRoot = "${cfHost}.${cfContext}/${warContext}"

    // The Cloud Foundry or Bluemix organization, username and password can be entered here.
    // cfOrg = ''
    // cfUsername = ''
    // cfPassword = ''
    {{/has}}
}

repositories {
    mavenCentral()
}

dependencies {
    {{#each dependencies}}
    {{#if scope}}{{this.scope}}Compile{{else}}compile{{/if}} ('{{this.groupId}}:{{this.artifactId}}:{{this.version}}{{#if type}}@{{this.type}}{{/if}}') {{#if exclusions}}{
        {{#each exclusions}}
        exclude group: '{{this.groupId}}', module: '{{this.artifactId}}'
        {{/each}}
    } {{/if}}
    {{/each}}
}

test {
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-results/unit")
    exclude '**/it/**'
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-results/it")
    include '**/it/**'
    exclude '**/unit/**'

    systemProperties = ['liberty.test.port': testServerHttpPort, 'war.context': warContext]
}

task printMessageAboutRunningServer {
    doLast {
        println "The server is now running at http://localhost:${testServerHttpPort}/${warContext}"
        println "To stop the server run 'gradle libertyStop'"
    }
}

task publishServerConfig(type: Copy) {
    from 'src/main/liberty/config/'
    into serverDirectory
}

task publishWar(type: Copy) {
    from(war)
    into("${serverDirectory}/dropins")
}

task createServerBootstrap() {
    outputs.file("${serverDirectory}/bootstrap.properties")
    doLast {
        def bootstrapProperties = file("${serverDirectory}/bootstrap.properties")
        if (!bootstrapProperties.exists()) {
            bootstrapProperties << "default.http.port=${testServerHttpPort}\ndefault.https.port=${testServerHttpsPort}"
        }
    }
}

liberty {
    install {
        {{#if libertybeta}}
        version = "2017.+"
        {{else}}
        runtimeUrl = "http://repo1.maven.org/maven2/com/ibm/websphere/appserver/runtime/wlp-webProfile7/17.0.0.1/wlp-webProfile7-17.0.0.1.zip"
        {{/if}}
    }
    {{#has createType 'bff'}}
    features {
        name = ['apiDiscovery-1.0']
        acceptLicense = true
    }
    {{/has}}
    {{#has technologies 'swagger'}}
    features {
        name = ['apiDiscovery-1.0']
        acceptLicense = true
    }
    {{/has}}
    packageLiberty {
        archive = packageFile
        include = packagingType
    }
}

task libertyStartTestServer(type: net.wasdev.wlp.gradle.plugins.tasks.StartTask){
    description 'Starts the WebSphere Liberty Profile server for testing.'
    logging.level = LogLevel.INFO
}

{{#has platforms 'bluemix'}}
task checkBluemixPropertiesSet() {
    doLast {
        checkPropertySet('cfOrg')
        checkPropertySet('cfUsername')
        checkPropertySet('cfPassword')
    }
}

task printBluemixProperties(dependsOn: 'checkBluemixPropertiesSet') {
    doLast {
        println "Running bluemix profile with the following properties:\n" +
                "\tcf.target=${cfTarget}\n" +
                "\tcf.space=${cfSpace}\n" +
                "\tcf.org=${cfOrg}\n" +
                "\tcf.username=${cfUsername}\n" +
                "The application will be accessed at context root ${cfContextRoot}"
    }
}

def checkPropertySet(propertyName) {
    if (!project.hasProperty(propertyName)) {
        throw new GradleException("The ${propertyName} property must be provided to run the cfPush task, this can be supplied on the command line with -P${propertyName}=<value>.")
    }
}

cloudfoundry {
    target = cfTarget
    if (project.hasProperty('cfOrg')) {
        organization = cfOrg
    }
    space = cfSpace
    file = file(packageFile)
    memory = 512
    appName = cfHost
}
{{/has}}

tasks.create('setupServer')
check.dependsOn 'integrationTest'
setupServer.dependsOn 'installLiberty', 'createServerBootstrap', 'publishServerConfig', 'publishWar'
publishServerConfig.mustRunAfter 'installLiberty'
createServerBootstrap.mustRunAfter 'publishServerConfig'
publishWar.mustRunAfter 'installLiberty'
publishWar.dependsOn 'war'
libertyStart.dependsOn 'setupServer'
integrationTest.dependsOn 'libertyStartTestServer', 'testClasses'
integrationTest.finalizedBy 'libertyStop'
libertyStartTestServer.dependsOn 'setupServer'
assemble.dependsOn 'libertyPackage'
libertyPackage.dependsOn 'setupServer'
{{#has platforms 'bluemix'}}
cfPush.dependsOn 'printBluemixProperties'
{{/has}}
libertyStart.finalizedBy 'printMessageAboutRunningServer'
